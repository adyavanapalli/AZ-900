name: "CI"

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      db: ${{ steps.filter.outputs.db }}
      vm: ${{ steps.filter.outputs.vm }}
      vnet-peering: ${{ steps.filter.outputs.vnet-peering }}

    steps:
      - name: Paths Filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            db:
              - 'terraform/db/**'
            vm:
              - 'terraform/vm/**'
            vnet-peering:
              - 'terraform/vnet-peering/**'

  terraform-db:
    needs: changes
    if: ${{ needs.changes.outputs.db == 'true' }}
    defaults:
      run:
        working-directory: "terraform/db"

    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out plan

      - name: Terraform Apply
        run: terraform apply -auto-approve "plan"

  terraform-vm:
    needs: changes
    if: ${{ needs.changes.outputs.vm == 'true' }}
    defaults:
      run:
        working-directory: "terraform/vm"

    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out plan

      - name: Terraform Apply
        run: terraform apply -auto-approve "plan"

  terraform-vnet-peering:
    needs: changes
    if: ${{ needs.changes.outputs.vnet-peering == 'true' }}
    defaults:
      run:
        working-directory: "terraform/vnet-peering"

    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out plan

      - name: Terraform Apply
        run: terraform apply -auto-approve "plan"
