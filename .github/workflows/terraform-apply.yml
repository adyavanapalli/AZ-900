name: "Terraform Apply"

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      resources: ${{ steps.filter.outputs.changes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Paths Filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            database:
              - 'terraform/database/**'

            virtual-machine:
              - 'terraform/virtual-machine/**'

            virtual-network-peering:
              - 'terraform/virtual-network-peering/**'

  terraform-apply:
    needs: changes
    if: ${{ needs.changes.outputs.resources != '[]' && needs.changes.outputs.resources != '' }}
    strategy:
      matrix:
        resource: ${{ fromJSON(needs.changes.outputs.resources) }}

    defaults:
      run:
        working-directory: "terraform/${{ matrix.resource }}"

    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out plan

      - name: Terraform Apply
        run: terraform apply -auto-approve "plan"
